{"version":3,"sources":["uni_modules/kux-request/common/request.uts","uni_modules/kux-request/utssdk/interface.uts","uni_modules/kux-request/common/store/index.uts","uni_modules/kux-request/common/interceptors.uts","uni_modules/kux-request/common/filters.uts","uni_modules/kux-request/common/utils/url.uts","uni_modules/kux-request/common/utils/index.uts","uni_modules/kux-request/utssdk/unierror.uts","uni_modules/kux-request/common/retry.uts","uni_modules/kux-request/common/batch.uts","uni_modules/kux-request/common/index.uts"],"sourcesContent":["import { RequestFilters } from \"./filters.uts\";\nimport { FilterOptions, RequestConfig, RequestInterceptor, RequestInterceptorSync, ResponseInterceptor, UseOptions, UseRetryOptions } from \"../utssdk/interface\";\nimport { state } from './store/index';\nimport { Utils, URL } from './utils/index';\nimport { KuxFailImpl } from '../utssdk/unierror';\n\nexport class Request {\n\tprivate baseURL: string;\n\tprivate config: UseOptions;\n\tprivate requestFilters: RequestFilters;\n\tpublic requestTask: RequestTask | null;\n\tpublic beforeSendOptions: RequestConfig | null;\n\t// private interceptors: Interceptor[] = [];\n\tprivate _cache: Map<string, any>;\n\tprivate isCache: boolean;\n\tprivate cacheKey: string;\n\t\n\tconstructor (config: UseOptions = {\n\t\tbaseURL: ''\n\t} as UseOptions) {\n\t\tthis.baseURL = config.baseURL;\n\t\tthis.config = config;\n\t\tthis.requestFilters = new RequestFilters({\n\t\t\tdebug: this.config.debug ?? false\n\t\t} as FilterOptions);\n\t\tthis.requestTask = null;\n\t\tthis.beforeSendOptions = null;\n\t\tthis._cache = new Map<string, any>();\n\t\tthis.isCache = false;\n\t\tthis.cacheKey = '';\n\t}\n\t\n\tprivate _mergeOptions (options: RequestConfig): RequestConfig {\n\t\tlet _options: RequestConfig = {\n\t\t\tquery: this.config.query,\n\t\t\tdata: this.config.data,\n\t\t\ttimeout: this.config.timeout,\n\t\t\tdataType: this.config.dataType,\n\t\t\tresponseType: this.config.responseType,\n\t\t\tsslVerify: this.config.sslVerify,\n\t\t\twithCredentials: this.config.withCredentials,\n\t\t\tfirstIpv4: this.config.firstIpv4,\n\t\t\theader: this.config.header,\n\t\t\tfilterRequest: this.config.filterRequest,\n\t\t\tdebug: this.config.debug,\n\t\t\txhrCode: this.config.xhrCode,\n\t\t\txhrCodeName: this.config.xhrCodeName,\n\t\t\txhrMessageName: this.config.xhrMessageName,\n\t\t\tmaxCacheSize: this.config.maxCacheSize,\n\t\t\topenCache: this.config.openCache\n\t\t};\n\t\t\n\t\tif (options.firstIpv4 != null) {\n\t\t\t_options.firstIpv4 = options.firstIpv4;\n\t\t}\n\t\t\n\t\tif (options.method != null) {\n\t\t\t_options.method = options.method;\n\t\t}\n\t\t\n\t\tif (options.timeout != null) {\n\t\t\t_options.timeout = options.timeout;\n\t\t}\n\t\t\n\t\tif (options.withCredentials != null) {\n\t\t\t_options.withCredentials = options.withCredentials;\n\t\t}\n\t\t\n\t\tif (options.dataType != null) {\n\t\t\t_options.dataType = options.dataType;\n\t\t}\n\t\t\n\t\tif (options.responseType != null) {\n\t\t\t_options.responseType = options.responseType;\n\t\t}\n\t\t\n\t\tif (options.sslVerify != null) {\n\t\t\t_options.sslVerify = options.sslVerify;\n\t\t}\n\t\t\n\t\tif (options.filterRequest != null) {\n\t\t\t_options.filterRequest = options.filterRequest;\n\t\t}\n\t\t\n\t\tif (options.query != null) {\n\t\t\t// (options.query as UTSJSONObject).toMap().forEach((value, key, _) => {\n\t\t\t// \t(_options.query as UTSJSONObject).set(key, value);\n\t\t\t// })\n\t\t\tif (_options.query == null) {\n\t\t\t\t_options.query = {}\n\t\t\t}\n\t\t\t_options.query = Object.assign(_options.query as UTSJSONObject, options.query as UTSJSONObject);\n\t\t}\n\t\t\n\t\tif (options.data != null) {\n\t\t\t// (options.data as UTSJSONObject).toMap().forEach((value, key, _) => {\n\t\t\t// \tconsole.log(key, value);\n\t\t\t// \tconsole.log(_options.data);\n\t\t\t// \tif (_options.data == null) {\n\t\t\t// \t\t_options.data = {}\n\t\t\t// \t};\n\t\t\t// \t(_options.data as UTSJSONObject).set(key, value);\n\t\t\t// \t// console.log(_options.data);\n\t\t\t// })\n\t\t\tif (_options.data == null) {\n\t\t\t\t_options.data = {};\n\t\t\t}\n\t\t\t_options.data = Object.assign(_options.data as UTSJSONObject, options.data as UTSJSONObject);\n\t\t}\n\t\t\n\t\tif (options.header != null) {\n\t\t\t// _options.header = options.header;\n\t\t\t// (options.header as UTSJSONObject).toMap().forEach((value, key, _) => {\n\t\t\t// \t(_options.header as UTSJSONObject).set(key, value);\n\t\t\t// })\n\t\t\tif (_options.header == null) {\n\t\t\t\t_options.header = {};\n\t\t\t}\n\t\t\t_options.header = Object.assign(_options.header as UTSJSONObject, options.header as UTSJSONObject);\n\t\t}\n\t\t\n\t\tif (options.debug != null) {\n\t\t\t_options.debug = options.debug;\n\t\t}\n\t\t\n\t\tif (options.xhrCode != null) {\n\t\t\t_options.xhrCode = options.xhrCode;\n\t\t}\n\t\t\n\t\tif (options.xhrCodeName != null) {\n\t\t\t_options.xhrCodeName = options.xhrCodeName;\n\t\t}\n\t\t\n\t\tif (options.xhrMessageName != null) {\n\t\t\t_options.xhrMessageName = options.xhrMessageName;\n\t\t}\n\t\t\n\t\t_options.maxCacheSize = 10;\n\t\t\n\t\tif (options.maxCacheSize != null) {\n\t\t\t_options.maxCacheSize = options.maxCacheSize;\n\t\t}\n\t\t\n\t\t_options.openCache = false;\n\t\t\n\t\tif (options.openCache != null) {\n\t\t\t_options.openCache = options.openCache;\n\t\t}\n\t\t\n\t\treturn _options;\n\t}\n\t\n\tprivate getSearchPrefix (url: string): string {\n\t\tconst useUrl = new URL(url);\n\t\t\n\t\treturn useUrl.search.length > 0 ? '&' : '?';\n\t}\n\t\n\tprivate async _request (url: string, options: RequestConfig = {} as RequestConfig): Promise<any> {\n\t\t// 合并默认配置和用户配置\n\t\t// let mergedOptions = this._mergeOptions(options);\n\t\t// console.log(options);\n\t\tlet mergedOptions = options;\n\t\t\n\t\t// 调用请求拦截器\n\t\tstate.interceptors.request.forEach((interceptor: RequestInterceptor) => {\n\t\t\tmergedOptions = interceptor(mergedOptions);\n\t\t});\n\t\tif (state.interceptors.requestSync !== null) {\n\t\t\tmergedOptions = await (state.interceptors.requestSync as RequestInterceptorSync)(mergedOptions);\n\t\t}\n\t\t\t\t\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tmergedOptions.url = this.baseURL + url;\n\t\t\t\n\t\t\tconst useUtils = new Utils();\n\t\t\tconst queryString = useUtils.objToQueryString(mergedOptions.query ?? {});\n\t\t\t/**\n\t\t\t * 处理 query  传参\n\t\t\t */\n\t\t\tif (queryString.length > 0) {\n\t\t\t\t// 判断请求地址是否携带参数\n\t\t\t\tmergedOptions.url += `${this.getSearchPrefix(`${mergedOptions.url}`)}${queryString}`;\n\t\t\t}\n\t\t\tthis.beforeSendOptions = mergedOptions;\n\t\t\t\n\t\t\t// 判断是否开启请求缓存\n\t\t\tlet _cacheKey = this.cacheKey;\n\t\t\tif (_cacheKey.length == 0) {\n\t\t\t\t_cacheKey = this.getKey(url, this.beforeSendOptions as RequestConfig);\n\t\t\t}\n\t\t\t\n\t\t\t// 判断是否获取缓存数据\n\t\t\tif (this.isCache) {\n\t\t\t\tif (mergedOptions.debug != null && mergedOptions.debug as boolean) {\n\t\t\t\t\tconsole.warn(`【kux-request:request】本次请求 ${_cacheKey} 为缓存结果`);\n\t\t\t\t}\n\t\t\t\tthis.isCache = false;\n\t\t\t\tif (this._cache.get(_cacheKey) != null) {\n\t\t\t\t\tresolve(this._cache.get(_cacheKey));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.requestTask = uni.request({\n\t\t\t\turl: `${mergedOptions.url}`,\n\t\t\t\tmethod: mergedOptions.method,\n\t\t\t\tdata: mergedOptions.data,\n\t\t\t\theader: mergedOptions.header,\n\t\t\t\tdataType: mergedOptions.dataType,\n\t\t\t\ttimeout: mergedOptions.timeout ?? 60000,\n\t\t\t\tresponseType: mergedOptions.responseType,\n\t\t\t\tsslVerify: mergedOptions.sslVerify,\n\t\t\t\twithCredentials: mergedOptions.withCredentials,\n\t\t\t\tsuccess: (res: RequestSuccess<any>) => {\n\t\t\t\t\tlet response = res.data;\n\t\t\t\t\t// 调用响应拦截\n\t\t\t\t\tstate.interceptors.response.forEach((interceptor: ResponseInterceptor) => {\n\t\t\t\t\t\tresponse = interceptor(response as any);\n\t\t\t\t\t});\n\t\t\t\t\t// 判断是否有自定义成功状态码\n\t\t\t\t\tif (typeof response === 'object' && mergedOptions.xhrCode != null && mergedOptions.xhrCodeName != null) {\n\t\t\t\t\t\tconst _res = response as UTSJSONObject;\n\t\t\t\t\t\tif (_res.getAny(`${mergedOptions.xhrCodeName}`) != mergedOptions.xhrCode) {\n\t\t\t\t\t\t\tif (mergedOptions.xhrMessageName != null) {\n\t\t\t\t\t\t\t\treject(new KuxFailImpl(900500).error(`${_res.getAny(`${mergedOptions.xhrMessageName}`)}`, response as any));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treject(new KuxFailImpl(900500).error());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (mergedOptions.openCache as boolean) {\n\t\t\t\t\t\t// 判断是否设置最大缓存数量\n\t\t\t\t\t\tif (this._cache.size >= parseInt(`${mergedOptions.maxCacheSize}`)) {\n\t\t\t\t\t\t\tlet i = 0;\n\t\t\t\t\t\t\tthis._cache.forEach((_, key) => {\n\t\t\t\t\t\t\t\tif (i == 0) {\n\t\t\t\t\t\t\t\t\tthis._cache.delete(key);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._cache.set(_cacheKey, response as any);\n\t\t\t\t\t}\n\t\t\t\t\tresolve(response);\n\t\t\t\t},\n\t\t\t\tfail: (fail: RequestFail) => {\n\t\t\t\t\t// console.log(useUtils.buildUniError('【kux-request:request】', fail.errCode, fail.errMsg));\n\t\t\t\t\treject(fail);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\t\n\tpublic getKey (url: string, options: RequestConfig): string {\n\t\tconst paramsString = JSON.stringify(options);\n\t\treturn `${url}-${paramsString}`;\n\t}\n\t\n\t// use (interceptor: Interceptor) {\n\t// \tthis.interceptors.push(interceptor);\n\t// }\n\t/**\n\t * 清除指定key的请求缓存\n\t * @description 请求指定key的请求缓存，如果key为空则清空当前请求实例所有的请求缓存\n\t * @returns {Request}\n\t */\n\tclearCache (key: string): Request {\n\t\tif (key.length == 0) {\n\t\t\tthis._cache.clear();\n\t\t\treturn this;\n\t\t}\n\t\t\n\t\tif (this._cache.has(key)) {\n\t\t\tthis._cache.delete(key);\n\t\t}\n\t\t\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * 获取指定key的请求缓存结果\n\t * @description 获取指定key的请求缓存结果\n\t * + key默认为 `url`-`options`\n\t * @returns {Request}\n\t */\n\tcache (key: string = ''): Request {\n\t\tthis.isCache = true;\n\t\tthis.cacheKey = key;\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * 复写全局配置\n\t * @description 复写当前实例的全局配置，比如data，query，header参数\n\t * @param {RequestConfig} config 配置项\n\t * @returns {Request}\n\t */\n\toverrideConfig (config: RequestConfig = {} as RequestConfig): Request {\n\t\tif (config.baseURL != null) {\n\t\t\tthis.config.baseURL = `${config.baseURL}`;\n\t\t\tthis.baseURL = `${config.baseURL}`;\n\t\t}\n\t\tif (config.query != null) {\n\t\t\tthis.config.query = config.query;\n\t\t}\n\t\tif (config.data != null) {\n\t\t\tthis.config.data = config.data;\n\t\t}\n\t\tif (config.header != null) {\n\t\t\tthis.config.header = config.header;\n\t\t}\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * request请求\n\t * @param {string} url 请求地址\n\t * @param {RequestConfig} options 请求配置，会覆盖全局配置\n\t * @returns {Promise<any>}\n\t */\n\tasync request (url: string, options: RequestConfig = {} as RequestConfig): Promise<any> {\n\t\t// 合并默认配置和用户配置\n\t\tlet _options = this._mergeOptions(options);\n\t\t// console.log(options);\n\t\t// 判断是否开启了过滤请求\n\t\tif (_options.filterRequest != null && (_options.filterRequest as boolean)) {\n\t\t\treturn this.requestFilters.filterRequest(url, _options, (): Promise<any> => this._request(url, _options));\n\t\t}\n\t\t\n\t\treturn this._request(url, _options);\n\t}\n\t\n\t/**\n\t * get请求\n\t * @param {string} url 请求地址\n\t * @param {RequestConfig} options 请求配置，会覆盖全局配置\n\t * @returns {Promise<any>}\n\t */\n\tasync get (url: string, options: RequestConfig = {} as RequestConfig): Promise<any> {\n\t\tlet _options = options;\n\t\t_options.method = 'GET';\n\t\treturn this.request(url, _options);\n\t}\n\t\n\t/**\n\t * post请求\n\t * @param {string} url 请求地址\n\t * @param {RequestConfig} options 请求配置，会覆盖全局配置\n\t * @returns {Promise<any>}\n\t */\n\tasync post (url: string, options: RequestConfig = {} as RequestConfig): Promise<any> {\n\t\tlet _options = options;\n\t\t_options.method = 'POST';\n\t\treturn this.request(url, _options);\n\t}\n\t\n\t/**\n\t * put请求\n\t * @param {string} url 请求地址\n\t * @param {RequestConfig} options 请求配置，会覆盖全局配置\n\t * @returns {Promise<any>}\n\t */\n\tasync put (url: string, options: RequestConfig = {} as RequestConfig): Promise<any> {\n\t\tlet _options = options;\n\t\t_options.method = 'PUT';\n\t\treturn this.request(url, _options);\n\t}\n\t\n\t/**\n\t * delete请求\n\t * @param {string} url 请求地址\n\t * @param {RequestConfig} options 请求配置，会覆盖全局配置\n\t * @returns {Promise<any>}\n\t */\n\tasync delete (url: string, options: RequestConfig = {} as RequestConfig): Promise<any> {\n\t\tlet _options = options;\n\t\t_options.method = 'DELETE';\n\t\treturn this.request(url, _options);\n\t}\n\t\n\t/**\n\t * 中断当前请求\n\t */\n\tabort () {\n\t\tif (this.requestTask == null) {\n\t\t\tthrow new KuxFailImpl(901404).error();\n\t\t}\n\t\t\n\t\tthis.requestTask!.abort();\n\t}\n}\n","export type UseOptions = {\n\t/**\n\t * 开发者服务器域名\n\t */\n\tbaseURL: string;\n\t/**\n\t * 请求的query参数，即最后拼接在地址栏后面的参数，如：`/user/info?id=1`\n\t * @defaultValue null\n\t */\n\tquery?: UTSJSONObject | null,\n\t/**\n\t * 请求的参数 UTSJSONObject|string类型\n\t * @type {RequestDataOptions}\n\t * @defaultValue null\n\t */\n\tdata?: any | null,\n\t/**\n\t * 设置请求的 header，header 中不能设置 Referer\n\t * @defaultValue null\n\t */\n\theader?: UTSJSONObject | null,\n\t/**\n\t * 超时时间，单位 ms\n\t * @defaultValue 60000\n\t */\n\ttimeout?: number | null;\n\t/**\n\t * 如果设为 json，会对返回的数据进行一次 JSON.parse，非 json 不会进行 JSON.parse\n\t * @defaultValue \"json\"\n\t * @deprecated 不支持\n\t * @autodoc false\n\t */\n\tdataType?: string | null;\n\t/**\n\t * 设置响应的数据类型。\n\t * \n\t * @deprecated 不支持\n\t * @autodoc false\n\t */\n\tresponseType?: string | null;\n\t/**\n\t * 验证 ssl 证书\n\t * \n\t * @deprecated 不支持\n\t * @autodoc false\n\t */\n\tsslVerify?: boolean | null,\n\t/**\n\t * 跨域请求时是否携带凭证（cookies）\n\t * \n\t * @uniPlatform {\n\t *    \"app\": {\n\t *        \"android\": {\n\t *            \"osVer\": \"4.4\",\n\t *  \t\t  \t \"uniVer\": \"√\",\n\t * \t\t\t \"unixVer\": \"x\"\n\t *        },\n\t *        \"ios\": {\n\t *            \"osVer\": \"9.0\",\n\t *  \t\t  \t \"uniVer\": \"√\",\n\t * \t\t\t \"unixVer\": \"x\"\n\t *        }\n\t *    }\n\t * }\n\t * \n\t */\n\twithCredentials?: boolean | null,\n\t/**\n\t * DNS解析时优先使用ipv4\n\t * @defaultValue false\n\t */\n\tfirstIpv4?: boolean | null,\n\t/**\n\t * 过滤重复请求\n\t * @defaultValue false\n\t */\n\tfilterRequest?: boolean | null,\n\t/**\n\t * 开启 debug 模式\n\t * @defaultValue false\n\t */\n\tdebug?: boolean | null,\n\t/**\n\t * 响应自定义成功状态码\n\t * @description 只有响应的自定义成功状态码匹配时才会返回响应结果\n\t */\n\txhrCode?: any | null,\n\t/**\n\t * 响应自定义状态码字段名\n\t * @description 成功响应的自定义状态码名称，比如 code, statusCode等\n\t */\n\txhrCodeName?: string | null,\n\t/**\n\t * 响应自定义描述内容字段名\n\t * @description 成功响应的自定义描述内容字段名，比如 msg, message 等\n\t * + 在定义了 `xhrCode` 和 `xhrCodeName` 时，该参数有效，当自定义成功状态码不匹配时作为catch返回的描述语\n\t */\n\txhrMessageName?: string | null,\n\t/**\n\t * 开启请求缓存\n\t */\n\topenCache?: boolean | null,\n\t/**\n\t * 最大缓存数量\n\t * @description 开启请求缓存时有效\n\t */\n\tmaxCacheSize?: number | null\n};\n\n/**\n * 请求配置\n */\nexport type RequestConfig = {\n\t/**\n\t * 开发者服务器域名\n\t */\n\tbaseURL?: string,\n\t/**\n\t * 开发者服务器接口地址\n\t */\n\turl?: string,\n\t/**\n\t * 请求的query参数，即最后拼接在地址栏后面的参数，如：`/user/info?id=1`\n\t * @defaultValue null\n\t */\n\tquery?: UTSJSONObject | null,\n\t/**\n\t * 请求的参数 UTSJSONObject|string类型\n\t * @type {RequestDataOptions}\n\t * @defaultValue null\n\t */\n\tdata?: any | null,\n\t/**\n\t * 设置请求的 header，header 中不能设置 Referer\n\t * @defaultValue null\n\t */\n\theader?: UTSJSONObject | null,\n\t/**\n\t * 请求方法\n\t * 如果设置的值不在取值范围内，会以GET方法进行请求。\n\t * @type {RequestMethod}\n\t * @defaultValue \"GET\"\n\t */\n\tmethod?: RequestMethod | null;\n\t/**\n\t * 超时时间，单位 ms\n\t * @defaultValue 60000\n\t */\n\ttimeout?: number | null;\n\t/**\n\t * 如果设为 json，会对返回的数据进行一次 JSON.parse，非 json 不会进行 JSON.parse\n\t * @defaultValue \"json\"\n\t * @deprecated 不支持\n\t * @autodoc false\n\t */\n\tdataType?: string | null;\n\t/**\n\t * 设置响应的数据类型。\n\t * \n\t * @deprecated 不支持\n\t * @autodoc false\n\t */\n\tresponseType?: string | null;\n\t/**\n\t * 验证 ssl 证书\n\t * \n\t * @deprecated 不支持\n\t * @autodoc false\n\t */\n\tsslVerify?: boolean | null,\n\t/**\n\t * 跨域请求时是否携带凭证（cookies）\n\t * \n\t * @uniPlatform {\n\t *    \"app\": {\n\t *        \"android\": {\n\t *            \"osVer\": \"4.4\",\n\t *  \t\t  \t \"uniVer\": \"√\",\n\t * \t\t\t \"unixVer\": \"x\"\n\t *        },\n\t *        \"ios\": {\n\t *            \"osVer\": \"9.0\",\n\t *  \t\t  \t \"uniVer\": \"√\",\n\t * \t\t\t \"unixVer\": \"x\"\n\t *        }\n\t *    }\n\t * }\n\t * \n\t */\n\twithCredentials?: boolean | null,\n\t/**\n\t * DNS解析时优先使用ipv4\n\t * @defaultValue false\n\t */\n\tfirstIpv4?: boolean | null,\n\t/**\n\t * 过滤重复请求\n\t * @defaultValue false\n\t */\n\tfilterRequest?: boolean | null,\n\t/**\n\t * 开启 debug 模式\n\t * @defaultValue false\n\t */\n\tdebug?: boolean | null,\n\t/**\n\t * 接口自定义成功状态码\n\t * @description 只有响应的自定义成功状态码匹配时才会返回响应结果\n\t */\n\txhrCode?: any | null,\n\t/**\n\t * 接口自定义状态码字段名\n\t * @description 成功响应的自定义状态码名称，比如 code, statusCode等\n\t */\n\txhrCodeName?: string | null,\n\t/**\n\t * 响应自定义描述内容字段名\n\t * @description 成功响应的自定义描述内容字段名，比如 msg, message 等\n\t * + 在定义了 `xhrCode` 和 `xhrCodeName` 时，该参数有效，当自定义成功状态码不匹配时作为catch返回的描述语\n\t */\n\txhrMessageName?: string | null,\n\t/**\n\t * 开启请求缓存\n\t */\n\topenCache?: boolean | null,\n\t/**\n\t * 最大缓存数量\n\t * @description 开启请求缓存时有效\n\t * @defaultValue 10\n\t */\n\tmaxCacheSize?: number | null\n};\n\nexport type RequestInterceptor = (options: RequestConfig) => RequestConfig;\nexport type RequestInterceptorSync = (options: RequestConfig) => Promise<RequestConfig>;\nexport type ResponseInterceptor = (response: any) => any;\nexport type ResponseInterceptorSync = (response: any) => Promise<any>;\n\nexport type Interceptors = {\n\trequest: RequestInterceptor[],\n\tresponse: ResponseInterceptor[],\n\trequestSync?: RequestInterceptorSync | null,\n\tresponseSync?: ResponseInterceptorSync | null\n}\n\nexport type FilterOptions = {\n\tdebug?: boolean;\n};\n\nexport type PendingRequests = Map<string, Promise<any>>;\n\n/**\n * useRetry 初始化配置\n */\nexport type UseRetryOptions = {\n\t/**\n\t * 最大重试次数\n\t */\n\tmaxRetryCount?: number | null;\n\t/**\n\t * 初始重试等待时间\n\t */\n\tinitialDelay?: number | null;\n\t/**\n\t * 最大重试等待时间\n\t */\n\tmaxDelay?: number | null;\n};\n\n/**\n * 错误码\n * 根据uni错误码规范要求，建议错误码以90开头，以下是错误码示例：\n * - 9010001 错误信息1\n * - 9010002 错误信息2\n */\nexport type KuxErrorCode = 901404 | 900408 | 900500;\n\n// export interface KuxRequestFail extends IUniError {\n// \terrCode: number;\n// }\n\n/**\n * 错误抛出统一接口定义\n */\nexport interface KuxRequestFail {\n\t/**\n\t * 统一错误码\n\t */\n\terrCode: number;\n\t/**\n\t * 统一错误信息\n\t */\n\terrMsg: string;\n\t/**\n\t * 统一错误主题（模块）名称\n\t */\n\terrSubject: string;\n\t/**\n\t * 错误信息中包含的数据\n\t */\n\tdata: any | null;\n\t/**\n\t * 源错误信息，可以包含多个错误，详见SourceError\n\t */\n\tcause: Error | null;\n}\n\n// export type Interceptor = {\n// \trequest?: (options: RequestOptions<any>) => RequestOptions<any>;\n// \tresponse?: (response:  any) => any;\n// };\n","import { Interceptors, PendingRequests } from \"../../utssdk/interface.uts\";\n\nexport type State = {\n\tinterceptors: Interceptors;\n\t// pendingRequests: PendingRequests;\n};\n\nexport const state = reactive({\n\tinterceptors: {\n\t\trequest: [],\n\t\tresponse: [],\n\t\trequestSync: null,\n\t\tresponseSync: null\n\t},\n\t// pendingRequests: new Map<string, Promise<any>>(),\n} as State);\n\nexport const setInterceptors = (interceptors: Interceptors) => {\n\tstate.interceptors = interceptors;\n};\n\n// export const setPendingRequest = (pendingRequests: PendingRequests) => {\n// \tstate.pendingRequests = pendingRequests;\n// };\n","import { Interceptors, RequestInterceptor, RequestInterceptorSync, ResponseInterceptor, ResponseInterceptorSync } from \"../utssdk/interface.uts\";\nimport { setInterceptors } from './store/index';\n\nexport class InterceptorManager {\n\tprivate interceptors: Interceptors;\n\t\n\tconstructor () {\n\t\tthis.interceptors = {\n\t\t\trequest: [] as RequestInterceptor[],\n\t\t\tresponse: [] as ResponseInterceptor[],\n\t\t\trequestSync: null,\n\t\t\tresponseSync: null\n\t\t} as Interceptors;\n\t}\n\t\n\tuseRequest (interceptor: RequestInterceptor): InterceptorManager {\n\t\tthis.interceptors.request.push(interceptor);\n\t\tsetInterceptors(this.interceptors);\n\t\treturn this;\n\t}\n\t\n\tuseRequestSync (interceptor: RequestInterceptorSync): InterceptorManager {\n\t\tthis.interceptors.requestSync = interceptor;\n\t\tsetInterceptors(this.interceptors);\n\t\treturn this;\n\t}\n\t\n\tuseResponse (interceptor: ResponseInterceptor): InterceptorManager {\n\t\tthis.interceptors.response.push(interceptor);\n\t\tsetInterceptors(this.interceptors);\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * 同步响应拦截暂不支持\n\t */\n\tprivate useResponseSync (interceptor: ResponseInterceptorSync): InterceptorManager {\n\t\tthis.interceptors.responseSync = interceptor;\n\t\tsetInterceptors(this.interceptors);\n\t\treturn this;\n\t}\n};\n","import { FilterOptions, PendingRequests, RequestConfig } from \"../utssdk/interface.uts\";\n\nexport class RequestFilters {\n\tprivate pendingRequests: PendingRequests;\n\tprivate debug: boolean;\n\t\n\tconstructor (options: FilterOptions = {} as FilterOptions) {\n\t\tthis.pendingRequests = new Map<string, Promise<any>>();\n\t\tthis.debug = false;\n\t\tif (options.debug !== null) {\n\t\t\tthis.debug = options.debug ?? false;\n\t\t}\n\t}\n\t\n\tprivate getKey (url: string, options: RequestConfig): string {\n\t\tconst paramsString = JSON.stringify(options);\n\t\treturn `${url}-${paramsString}`;\n\t}\n\t\n\tasync filterRequest (url: string, options: RequestConfig = {} as RequestConfig, request: () => Promise<any>): Promise<any> {\n\t\tconst key = this.getKey(url, options);\n\t\t\n\t\tif (options.debug !== null) {\n\t\t\tthis.debug = options.debug ?? false;\n\t\t}\n\t\tif (this.pendingRequests.has(key)) {\n\t\t\tif (this.debug) {\n\t\t\t\tconsole.warn(`【 kux-request:filterRequest】请求key ${key} 已存在，本次请求已自动过滤`);\n\t\t\t}\n\t\t\treturn this.pendingRequests.get(key);\n\t\t}\n\t\t\n\t\tconst promise = request();\n\t\tthis.pendingRequests.set(key, promise);\n\t\t// this.updateState();\n\t\t\n\t\ttry {\n\t\t\tconst result = await promise;\n\t\t\t// this.pendingRequests.delete(key);\n\t\t\treturn result;\n\t\t} catch (err) {\n\t\t\tthis.pendingRequests.delete(key);\n\t\t\tthrow err;\n\t\t}\n\t}\n}\n","class URLSearchParams {\n\tprivate params: Map<string, string> = new Map();\n\t\n\tconstructor (search: string) {\n\t\tsearch\n\t\t\t.split('&')\n\t\t\t.filter((param: string): boolean => param.length > 0)\n\t\t\t.forEach((param: string) => {\n\t\t\t\tconst paramSplit = param.split('=');\n\t\t\t\tconst key = paramSplit[0];\n\t\t\t\tconst value = paramSplit[1];\n\t\t\t\tconst decodedKey = decodeURIComponent(key);\n\t\t\t\tconst decodedValue = decodeURIComponent(value);\n\t\t\t\tthis.params.set(`${decodedKey}`, `${decodedValue}`)\n\t\t\t});\n\t}\n\t\n\tget (key: string): string | null {\n\t\treturn this.params.get(key);\n\t}\n}\n\nexport class URL {\n\tprotocol: string;\n\thost: string;\n\tpathname: string;\n\tsearch: string;\n\tsearchParams: URLSearchParams;\n\t\n\tconstructor (url: string) {\n\t\tconst urlRegex = /^(\\w+):\\/\\/([^\\/?#]+)([^?#]*)(\\?[^#]*)?(#.*)?$/;\n\t\tconst match = url.match(urlRegex);\n\t\t\n\n\n\n\n\n\n\t\t\n\t\tif (typeof match !== 'object') {\n\t\t\tthrow new Error('Invalid URL');\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif (match.length == 0) {\n\t\t\tthrow new Error('Invalid URL');\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tthis.protocol = match[1];\n\t\tthis.host = match[2];\n\t\tthis.pathname = '/';\n\t\tthis.search = '';\n\t\t\n\t\tif (match.length >= 4) {\n\t\t\tthis.pathname = `${match[3]}`;\n\t\t}\n\t\t\n\t\tif (match.length >= 5) {\n\t\t\tthis.search = `${match[4]}`;\n\t\t}\n\t\t\n\t\tthis.searchParams = new URLSearchParams(this.search.slice(1));\n\t}\n\t\n\tprivate toStringURL(): string {\n\t\treturn `${this.protocol}://${this.host}${this.pathname}${this.search}`;\n\t}\n\t\n\tget href (): string {\n\t\treturn this.toStringURL();\n\t}\n}\n","/**\n * 工具类\n * @class\n * @method objToQueryString 对象转查询字符串\n */\nexport class Utils {\n\t/**\n\t * 对象转查询字符串\n\t * @param {UTSJSONObject} queryObj 对象\n\t * @returns {string}\n\t */\n\tobjToQueryString (queryObj: UTSJSONObject): string {\n\t\tlet params: string[] = [];\n\t\t\n\t\tqueryObj.toMap().forEach((value, key) => {\n\t\t\tconst encodedKey = encodeURIComponent(key);\n\t\t\tconst encodedValue = encodeURIComponent(`${value}`);\n\t\t\t\n\t\t\tparams.push(`${encodedKey}=${encodedValue}`);\n\t\t});\n\t\t\n\t\treturn `${params.join('&')}`;\n\t}\n\t\n\tbuildUniError (errSubject: string, errCode: number, errMsg: string, cause: string = ''): UniError {\n\t\tconst error = new UniError(errSubject, errCode, errMsg);\n\t\tconst sourceError = new SourceError(cause);\n\t\terror.cause = sourceError;\n\t\t\n\t\treturn error;\n\t}\n\t\n\tsleep (ms: number): Promise<any> {\n\t\treturn new Promise((resolve) => {\n\t\t\tlet timeout: number = 0;\n\t\t\ttimeout = setTimeout(() => {\n\t\t\t\tclearTimeout(timeout);\n\t\t\t\tresolve('');\n\t\t\t}, ms);\n\t\t});\n\t}\n}\n\nexport * from './url';\n","import { KuxErrorCode, KuxRequestFail } from './interface';\n\n/**\n * 错误主题\n * 注意：错误主题一般为插件名称，每个组件不同，需要使用时请更改。\n * [可选实现]\n */\nexport const UniErrorSubject = 'kux-request';\n\n/**\n * 错误信息\n * @UniError\n * [可选实现]\n */\nexport const UniErrors : Map<KuxErrorCode, string> = new Map([\n  /**\n   * 错误码及对应的错误信息\n   */\n  [901404, '请求任务不存在'],\n  [900408, '请求超时'],\n  [900500, '请求失败']\n]);\n\n/**\n * 错误对象实现\n */\nexport class KuxFailImpl extends UniError implements KuxRequestFail {\n\toverride errCode: KuxErrorCode;\n\t/**\n\t * 错误对象构造函数\n\t */\n\tconstructor(errCode : KuxErrorCode) {\n\t  super();\n\t  this.errSubject = UniErrorSubject;\n\t  this.errCode = errCode;\n\t  this.errMsg = UniErrors[errCode] ?? \"\";\n\t}\n\t\n\terror (errMsg: string = '', data: any = '', cause: string = ''): UniError {\n\t\tconst errorRes = new UniError(this.errSubject, this.errCode, this.errMsg);\n\t\tconst sourceError = new SourceError(cause);\n\t\tif (errMsg.length > 0) {\n\t\t\terrorRes.errMsg = errMsg;\n\t\t}\n\t\terrorRes.data = data;\n\t\terrorRes.cause = sourceError;\n\t\t\n\t\treturn errorRes;\n\t}\n}\n","import { RequestConfig } from \"../utssdk/interface.uts\";\nimport { Request } from './request';\nimport { Utils } from './utils/index';\nimport { KuxFailImpl } from '../utssdk/unierror';\n\nexport class RetryManager extends Request {\n\tprivate maxRetryCount: number;\n\tprivate initialDelay: number;\n\tprivate maxDelay: number;\n\t\n\tconstructor (maxRetryCount: number, initialDelay: number, maxDelay: number) {\n\t\tsuper();\n\t\tthis.maxRetryCount = maxRetryCount;\n\t\tthis.initialDelay = initialDelay;\n\t\tthis.maxDelay = maxDelay;\n\t}\n\t\n\tsendRequest (url: string, options: RequestConfig = {} as RequestConfig): Promise<any> {\n\t\tlet retryCount = 0;\n\t\tlet delay = this.initialDelay;\n\t\tlet timeout = 60000;\n\t\tlet _this = this;\n\t\tif (options.timeout !== null) {\n\t\t\ttimeout = parseInt(`${options.timeout}`);\n\t\t}\n\t\tasync function doRequest (): Promise<any> {\n\t\t\ttry {\n\t\t\t\treturn await _this.request(url, options);\n\t\t\t} catch (error) {\n\t\t\t\tif (delay >= timeout) {\n\t\t\t\t\tthrow new KuxFailImpl(900408).error();\n\t\t\t\t}\n\t\t\t\tif (retryCount < _this.maxRetryCount) {\n\t\t\t\t\tretryCount++;\n\t\t\t\t\tconsole.warn(`请求失败，正在尝试重试（${retryCount}）`);\n\t\t\t\t\tawait new Utils().sleep(delay);\n\t\t\t\t\t// 根据指数退避算法计算重试时间\n\t\t\t\t\tdelay = Math.min(delay * 2, _this.maxDelay);\n\t\t\t\t\treturn doRequest();\n\t\t\t\t} else {\n\t\t\t\t\tthrow new KuxFailImpl(900500).error();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t\n\t\treturn doRequest();\n\t}\n};\n","export class BatchRequestManager {\n\tprivate requests: Promise<any>[] = [];\n\t\n\taddRequest(request: Promise<any>): Promise<any> {\n\t\tthis.requests.push(request);\n\t\treturn request;\n\t}\n\t\n\taddBatchRequest(requests: Promise<any>[]): Promise<any>[] {\n\t\tthis.requests = requests;\n\t\treturn this.requests;\n\t}\n\t\n\tasync executeBatch(): Promise<any[]> {\n\t\tconst results = await Promise.all(this.requests);\n\t\tthis.requests = [];\n\t\treturn results;\n\t}\n};\n","import { InterceptorManager } from './interceptors.uts';\nimport { FilterOptions, UseOptions } from '../utssdk/interface';\nimport { Request } from './request';\nimport { RequestFilters } from './filters';\nimport { URL, Utils } from './utils/index';\nimport { RetryManager } from './retry';\nimport { BatchRequestManager } from './batch';\n\n/**\n * 创建请求实例\n * @param {UseOptions} options 实例参数\n * @returns {Request}\n */\nexport const useRequest = (options: UseOptions): Request => {\n\treturn new Request(options);\n}\n\n/**\n * 创建拦截器实例\n * @returns {InterceptorManager}\n */\nexport const useInterceptor = (): InterceptorManager => {\n\treturn new InterceptorManager();\n}\n\n/**\n * 创建过滤器实例\n * @returns {RequestFilters}\n */\nexport function useFilter (options: FilterOptions = {} as FilterOptions): RequestFilters {\n\treturn new RequestFilters(options);\n}\n\n/**\n * 创建URL实例\n * @returns {URL}\n */\nexport const useURL = (url: string): URL => {\n\treturn new URL(url);\n}\n\n/**\n * 创建工具实例\n */\nexport const useUtils = (): Utils => {\n\treturn new Utils();\n}\n\n/**\n * 创建请求重试实例\n * @param {number} maxRetryCount 最大重试次数。指定在请求失败时最多尝试多少次重试。如果请求一直失败，最多只会尝试 `maxRetryCount` 次重试。\n * @param {number} initialDelay 初始重试等待时间。指定在第一次请求失败后，等待多长时间后再尝试重试。单位是毫秒。\n * @param {number} maxDelay 最大重试等待时间。指定在重试过程中，等待时间最多不超过多少毫秒。这个参数可以防止等待时间过长。\n * @returns {RetryManager}\n */\nexport const useRetry = (maxRetryCount: number, initialDelay: number, maxDelay: number): RetryManager => {\n\treturn new RetryManager(maxRetryCount, initialDelay, maxDelay);\n}\n\n/**\n * 创建批量请求实例\n * @returns {BatchRequestManager}\n */\nexport const useBatchRequest = (): BatchRequestManager => {\n\treturn new BatchRequestManager();\n}\n\nexport * from '../utssdk/interface';\n"],"names":[],"mappings":"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"}